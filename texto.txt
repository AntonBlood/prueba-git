Consejo - Intentar no tener repositorios anidados.

GITHUB.-

Es una especie de red social de programadores. Con este sitio podemos subir nuestros proyectos y lograr que otras personas colaboren con ellos.

CREACION DE UN REPOSITORIO REMOTO EN GITHUB--------------------------------------

rm -fr .git    #Elimina el repositorios

Coloco crear nuevo repositorio en mi cuenta de GitHub.
Coloco el nombre del repositorio, ejemplo:

ifix-proyecto-coder

Puedo colocar una descripcion que es opcional.


Public: cualquiera lo va a poder acceder pero tiene un par de  ventajas como GitHub pages.

Private: Tendremos que darle permisos a cada persona que quiera acceder al repositorio, en el privado no se podra ejecutar GitHub pages.


Tambien nos permite agregar un archivo README, en este caso no lo agregamos y dejamos el resto por defecto. Creamos el repositorio.



Hecho ello nos dan 2 opciones:

---------------------------------------------------------------------------------

…or create a new repository on the command line
echo "# ifix-proyecto-coder" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/AntonBlood/ifix-proyecto-coder.git
git push -u origin main

---------------------------------------------------------------------------------

…or push an existing repository from the command line
git remote add origin https://github.com/AntonBlood/ifix-proyecto-coder.git
git branch -M main
git push -u origin main

---------------------------------------------------------------------------------

La primera me sirve para repositorios donde todavia no he realizado el git init, donde no estoy trabajando con git, esa opcion crea un repositorio y ademas lo sube a github.

En este caso como no hemos realizado git init utilizamos la primera:
copiamos el codigo y lo pegamos en la terminal de bash, al ultimo le damos enter y ya se subio nuestro proyecto a GitHub.

Si ahora refresco en GitHub, ya aparece el README, el nombre del proyecto, el resto de archivos no los veo por que tengo que hacer el git add, git commit, etc.


Entonces en la terminal hago:

git add .

git commit -m "Primer commit"


Repasamos el codigo que pegamos:


echo "# ifix-proyecto-coder" >> README.md  

(Esto es para crear un archivo .md con el nombre del proyecto)


git init

(Para crear un repositorio)

git add README.md

(hace el git add del archivo del archivo README.md que creamos )


git commit -m "first commit"

(hace el commit del README.md)

git branch -M main

(Nombra esta rama como main )


git remote add origin https://github.com/AntonBlood/ifix-proyecto-coder.git

(Le especificamos cual es la url del repositorio remota, es decir a donde va a subir los archivos )

git push -u origin main

(git push lo que hace es subir los archivos del repositorio local al remoto, nos va a permitir enviar cualquier cambio a GitHub)


Hacemos un nuevo:

git add .

git commit -m "Agrego instrucciones"


git push    #Sube los cambios al repositorio en la nube

Cuando hago git push no hace falta indicarle el nombre de la rama remota, pues el git push -u origin main solo lo hago una vez. 

Ahora si veo mi repositorio en la nube, ya tengo los archivos subidos a GitHub.

--------------------------------------------------------------------------------

Ahora creo un nuevo repositorio:

prueba-git

En este caso supongamos que ya tengo un repositorio inicializado, es decir que el proyeto ya tiene git, entonces usamos la segunda opcion:

…or push an existing repository from the command line
git remote add origin https://github.com/AntonBlood/ifix-proyecto-coder.git
git branch -M main
git push -u origin main


Copiamos el codigo y lo ponemos en la terminal: 

git remote add origin https://github.com/AntonBlood/ifix-proyecto-coder.git

(Especifica cual va a ser la url remota)


git branch -M main

(Cambia el nombre de la rama a main)

git push -u origin main

(hace un git push -u origin main y especifica que va a pushear a la rama remota con nombre main ).


De este modo ya tenemos nuestro proyecto que tenia git inicializado en GitHub.


52:40
Ahora desde un repositorio de GitHub puedo ver las ramas, si yo trabajo con otra rama a nivel local, tambien tengo que pushear esa rama.

Puedo ver el historial de commits y en cada uno de ellos puedo ver los cambios, puedo dejar un comentario, puedo ver los archivos de ese commit en especifico.

Tambien se pueden descargar los archivos.


Ahora supongamos que yo edito algo desde GitHub
54:15

Se puede pensar esto tanto como una edicion desde GitHub o como otro compañero, otro colega desarrollador que esta trabajando y tambien sube sus cambios:

modificacion de Santi

gitHub deja hacer el commit

Entonces ahora mi repositorio remoto, mi repositorio en GitHub tiene un cambio que yo no tengo en mi repositorio local.

Ahora si yo hago un 
git add .

git commit -m "******"

git push

Me lo rechaza, yo al pushear los cambios a la url.
Esto fue rechazado por que el repositorio remoto esta mas avanzado que mi repositorio local.

Si yo hago un git log --online

No tengo el commit que se realizo en el GitHub y siempre que pase esto no podremos hacer un push, yo antes de pushear tengo que traer los cambios del repositorio remoto, ya sea por que alguien que no soy yo avanzo  o por que yo modifique algo en el repositorio remoto.


Para traerme esos cambios utilizo:

git pull

Ya me aparece la modificacion de Santi.

Ahora si realizo un git push no habra ningun problema.


